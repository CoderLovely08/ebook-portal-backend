// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SystemUsersInfo {
  id                  Int       @id @default(autoincrement()) @map("system_user_id")
  email               String    @unique @map("system_user_email")
  password            String    @map("system_user_password")
  fullName            String    @map("system_user_full_name")
  userType            UserType  @relation(fields: [userTypeId], references: [id])
  userTypeId          Int       @map("system_user_type_id")
  isActive            Boolean   @default(true) @map("system_user_is_active")
  resetToken          String?   @map("system_user_reset_token")
  resetTokenExpiresAt DateTime? @map("system_user_reset_token_expires_at")
  createdAt           DateTime  @default(now()) @map("system_user_created_at")
  updatedAt           DateTime  @updatedAt @map("system_user_updated_at")

  PurchaseOrders PurchaseOrder[]
  UserLibraries  UserLibrary[]
  Reviews        Review[]

  @@map("SystemUsersInfo")
}

model UserType {
  id          Int               @id @default(autoincrement()) @map("user_type_id")
  name        String            @unique @map("user_type_name")
  isActive    Boolean           @default(true) @map("user_type_is_active")
  createdAt   DateTime          @default(now()) @map("user_type_created_at")
  updatedAt   DateTime          @updatedAt @map("user_type_updated_at")
  systemUsers SystemUsersInfo[]

  @@map("UserTypeInfo")
}

// Book model for eBook information
model Book {
  id            String   @id @default(uuid())
  title         String
  author        String
  description   String   @db.Text
  coverImage    String?
  filePath      String // Path to the PDF file
  price         Float // 0 for free books
  isFree        Boolean  @default(false)
  publishedDate DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  categories     CategoriesOnBooks[]
  purchaseOrders PurchaseOrder[]
  reviews        Review[]
  library        UserLibrary[]

  @@map("books")
}

// Category model for organizing books
model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  books CategoriesOnBooks[]

  @@map("categories")
}

// Junction table for many-to-many relationship between Books and Categories
model CategoriesOnBooks {
  bookId     String
  categoryId String
  assignedAt DateTime @default(now())

  // Relations
  book     Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([bookId, categoryId])
  @@map("categories_on_books")
}

// PurchaseOrder model for tracking book purchases
model PurchaseOrder {
  id            String      @id @default(uuid())
  userId        Int
  bookId        String
  purchaseDate  DateTime    @default(now())
  status        OrderStatus @default(PENDING)
  amount        Float       @default(0)
  isActionTaken Boolean     @default(false)

  // Relations
  user SystemUsersInfo @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book            @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("purchase_orders")
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

// UserLibrary model to track which books users have access to
model UserLibrary {
  id        String   @id @default(uuid())
  userId    Int
  bookId    String
  addedDate DateTime @default(now())

  // Relations
  user SystemUsersInfo @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book            @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@map("user_library")
}

// Review model for user ratings and reviews
model Review {
  id        String   @id @default(uuid())
  userId    Int
  bookId    String
  rating    Int      @db.SmallInt // 1-5 stars
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user SystemUsersInfo @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book            @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@map("reviews")
}
